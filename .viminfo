# This viminfo file was generated by Vim 8.2.
# You may edit it if you're careful!

# Viminfo version
|1,4

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~H
# Command Line History (newest to oldest):
:wq
|2,0,1753155089,,"wq"
:%d
|2,0,1753155085,,"%d"
:%g
|2,0,1753150217,,"%g"
:$d
|2,0,1753149343,,"$d"
:q!
|2,0,1752944550,,"q!"
:%
|2,0,1752937384,,"%"
:^d
|2,0,1752935234,,"^d"

# Search String History (newest to oldest):

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Debug Line History (newest to oldest):

# Registers:
""1	LINE	0
	#!/bin/bash
	# Check currently whitelisted IPs from fail2ban
	./fail2ban.log | \
	    grep -e " failed to authenticate" | \
	    cut -d' ' -f1-3 > /tmp/fail2ban_output
	
	# Function to remove temporary file
	remove_temp_files() {
	    if [ ! -f /tmp/fail2ban_output ]; then
	        rm /tmp/fail2ban_output
	    fi
	}
	
	# Main execution
	while true; do
	    echo "\nCurrent fail2ban statistics:"
	    cat /tmp/fail2ban_output
	    read -r response
	    if [ "$response" != "Press Enter to continue..." ]; then
	        break
	    fi
	    echo -e "\nPress Enter to continue..."
	done
	
	# Remove temporary file
	remove_temp_files
	
|3,1,1,1,27,0,1753155085,"#!/bin/bash","# Check currently whitelisted IPs from fail2ban","./fail2ban.log | \\","    grep -e \" failed to authenticate\" | \\","    cut -d' ' -f1-3 > /tmp/fail2ban_output","","# Function to remove temporary file","remove_temp_files() {","    if [ ! -f /tmp/fail2ban_output ]; then","        rm /tmp/fail2ban_output","    fi","}","","# Main execution","while true; do","    echo \"\\nCurrent fail2ban statistics:\"",>30
|<"    cat /tmp/fail2ban_output","    read -r response","    if [ \"$response\" != \"Press Enter to continue...\" ]; then","        break","    fi","    echo -e \"\\nPress Enter to continue...\"","done","","# Remove temporary file","remove_temp_files",""
"2	LINE	0
	#!/bin/bash
	
	# Function to check if an IP address is whitelisted by fail2ban
	check_whitelist_ip() {
	    # List of whitelist IPs (replace with actual IPs)
	    whitelist_ips=(
	        192.168.1.100,
	        192.168.1.150,
	        192.168.4.200
	    )
	
	    # Loop through each IP in the whitelist to check against fail2ban
	    foreach ip in "${whitelist_ips[@]}" {
	        # Simulate a failed login attempt with the current IP
	        echo "Enter failed login attempt for ${ip}..."
	
	        # Check if the login was accepted (not blocked by fail2ban)
	        status=$(bg BADGE fail2ban -t "$ip" &>/dev/null)
	
	        if [ $? -ne 0 ]; then
	            echo "IP $ip is whitelisted. Not blocked by fail2ban."
	        else
	            echo "IP $ip has been whitelisted and now allows access."
	            exit 1
	        fi
	    }
	
	    echo "All whitelist IPs have been checked against fail2ban."
	    echo "No IP found that is being blocked."
	}
	
	# Prepare the list of whitelist IPs to check (this can be dynamic based on user input)
	# Replace with actual list of IPs you want to check
	
	# Function to get a list of IPs from /etc/hosts or similar
	get whitelist_ips() {
	    hostname=$(hostname || "localhost")
	    ipaddress=$(cat /etc/hosts | grep -q "$hostname" | head -n1 | awk '{print $2}' || echo 0)
	    
	    if [ $? -ne 0 ]; then
	        echo "Failed to get IP address for domain: $(hostname)"
	        return 1
	    fi
	
	    echo "$ipaddress"
	}
	
	# Check the whitelist IPs dynamically
	get whitelist_ips && check_whitelist_ip || echo "Error: Could not determine whitelist IPs."
	
|3,0,2,1,50,0,1753154719,"#!/bin/bash","","# Function to check if an IP address is whitelisted by fail2ban","check_whitelist_ip() {","    # List of whitelist IPs (replace with actual IPs)","    whitelist_ips=(","        192.168.1.100,","        192.168.1.150,","        192.168.4.200","    )","","    # Loop through each IP in the whitelist to check against fail2ban","    foreach ip in \"${whitelist_ips[@]}\" {",>63
|<"        # Simulate a failed login attempt with the current IP","        echo \"Enter failed login attempt for ${ip}...\"","","        # Check if the login was accepted (not blocked by fail2ban)","        status=$(bg BADGE fail2ban -t \"$ip\" &>/dev/null)","","        if [ $? -ne 0 ]; then","            echo \"IP $ip is whitelisted. Not blocked by fail2ban.\"","        else","            echo \"IP $ip has been whitelisted and now allows access.\"","            exit 1","        fi",>7
|<"    }","","    echo \"All whitelist IPs have been checked against fail2ban.\"","    echo \"No IP found that is being blocked.\"","}","","# Prepare the list of whitelist IPs to check (this can be dynamic based on user input)","# Replace with actual list of IPs you want to check","","# Function to get a list of IPs from /etc/hosts or similar","get whitelist_ips() {","    hostname=$(hostname || \"localhost\")",>97
|<"    ipaddress=$(cat /etc/hosts | grep -q \"$hostname\" | head -n1 | awk '{print $2}' || echo 0)","    ","    if [ $? -ne 0 ]; then","        echo \"Failed to get IP address for domain: $(hostname)\"","        return 1","    fi","","    echo \"$ipaddress\"","}","","# Check the whitelist IPs dynamically","get whitelist_ips && check_whitelist_ip || echo \"Error: Could not determine whitelist IPs.\"",""
"3	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	FORCE_NO_COLOR=false
	
	# Parse command line arguments
	parse_args() {
	    while [[ $# -gt 0 ]]; do
	        case $1 in
	            --no-color|--no-colour)
	                FORCE_NO_COLOR=true
	                shift
	                ;;
	            --help|-h)
	                show_usage
	                exit 0
	                ;;
	            *)
	                echo "Unknown option: $1"
	                show_usage
	                exit 1
	                ;;
	        esac
	    done
	}
	
	show_usage() {
	    echo "Usage: $0 [OPTIONS]"
	    echo ""
	    echo "Options:"
	    echo "  --no-color     Disable color output"
	    echo "  --help, -h     Show this help message"
	    echo ""
	}
	
	# Check if terminal supports colors
	check_color_support() {
	    # If colors are force disabled, return false
	    if [[ "$FORCE_NO_COLOR" == true ]]; then
|3,0,3,1,50,0,1753150527,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"",>22
|<"FORCE_NO_COLOR=false","","# Parse command line arguments","parse_args() {","    while [[ $# -gt 0 ]]; do","        case $1 in","            --no-color|--no-colour)","                FORCE_NO_COLOR=true","                shift","                ;;","            --help|-h)","                show_usage","                exit 0","                ;;","            *)","                echo \"Unknown option: $1\"","                show_usage","                exit 1","                ;;",>14
|<"        esac","    done","}","","show_usage() {","    echo \"Usage: $0 [OPTIONS]\"","    echo \"\"","    echo \"Options:\"","    echo \"  --no-color     Disable color output\"","    echo \"  --help, -h     Show this help message\"","    echo \"\"","}","","# Check if terminal supports colors","check_color_support() {","    # If colors are force disabled, return false","    if [[ \"$FORCE_NO_COLOR\" == true ]]; then"
"4	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	FORCE_NO_COLOR=false
	
	# Parse command line arguments
	parse_args() {
	    while [[ $# -gt 0 ]]; do
	        case $1 in
	            --no-color|--no-colour)
	                FORCE_NO_COLOR=true
	                shift
	                ;;
	            --help|-h)
	                show_usage
	                exit 0
	                ;;
	            *)
	                echo "Unknown option: $1"
	                show_usage
	                exit 1
	                ;;
	        esac
	    done
	}
	
	show_usage() {
	    echo "Usage: $0 [OPTIONS]"
	    echo ""
	    echo "Options:"
	    echo "  --no-color     Disable color output"
	    echo "  --help, -h     Show this help message"
	    echo ""
	}
	
	# Check if terminal supports colors
	check_color_support() {
	    # If colors are force disabled, return false
	    if [[ "$FORCE_NO_COLOR" == true ]]; then
|3,0,4,1,50,0,1753150363,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"",>22
|<"FORCE_NO_COLOR=false","","# Parse command line arguments","parse_args() {","    while [[ $# -gt 0 ]]; do","        case $1 in","            --no-color|--no-colour)","                FORCE_NO_COLOR=true","                shift","                ;;","            --help|-h)","                show_usage","                exit 0","                ;;","            *)","                echo \"Unknown option: $1\"","                show_usage","                exit 1","                ;;",>14
|<"        esac","    done","}","","show_usage() {","    echo \"Usage: $0 [OPTIONS]\"","    echo \"\"","    echo \"Options:\"","    echo \"  --no-color     Disable color output\"","    echo \"  --help, -h     Show this help message\"","    echo \"\"","}","","# Check if terminal supports colors","check_color_support() {","    # If colors are force disabled, return false","    if [[ \"$FORCE_NO_COLOR\" == true ]]; then"
"5	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	FORCE_NO_COLOR=false
	
	# Parse command line arguments
	parse_args() {
	    while [[ $# -gt 0 ]]; do
	        case $1 in
	            --no-color|--no-colour)
	                FORCE_NO_COLOR=true
	                shift
	                ;;
	            --help|-h)
	                show_usage
	                exit 0
	                ;;
	            *)
	                echo "Unknown option: $1"
	                show_usage
	                exit 1
	                ;;
	        esac
	    done
	}
	
	show_usage() {
	    echo "Usage: $0 [OPTIONS]"
	    echo ""
	    echo "Options:"
	    echo "  --no-color     Disable color output"
	    echo "  --help, -h     Show this help message"
	    echo ""
	}
	
	# Check if terminal supports colors
	check_color_support() {
	    # If colors are force disabled, return false
	    if [[ "$FORCE_NO_COLOR" == true ]]; then
|3,0,5,1,50,0,1753150315,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"",>22
|<"FORCE_NO_COLOR=false","","# Parse command line arguments","parse_args() {","    while [[ $# -gt 0 ]]; do","        case $1 in","            --no-color|--no-colour)","                FORCE_NO_COLOR=true","                shift","                ;;","            --help|-h)","                show_usage","                exit 0","                ;;","            *)","                echo \"Unknown option: $1\"","                show_usage","                exit 1","                ;;",>14
|<"        esac","    done","}","","show_usage() {","    echo \"Usage: $0 [OPTIONS]\"","    echo \"\"","    echo \"Options:\"","    echo \"  --no-color     Disable color output\"","    echo \"  --help, -h     Show this help message\"","    echo \"\"","}","","# Check if terminal supports colors","check_color_support() {","    # If colors are force disabled, return false","    if [[ \"$FORCE_NO_COLOR\" == true ]]; then"
"6	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	FORCE_NO_COLOR=false
	
	# Parse command line arguments
	parse_args() {
	    while [[ $# -gt 0 ]]; do
	        case $1 in
	            --no-color|--no-colour)
	                FORCE_NO_COLOR=true
	                shift
	                ;;
	            --help|-h)
	                show_usage
	                exit 0
	                ;;
	            *)
	                echo "Unknown option: $1"
	                show_usage
	                exit 1
	                ;;
	        esac
	    done
	}
	
	show_usage() {
	    echo "Usage: $0 [OPTIONS]"
	    echo ""
	    echo "Options:"
	    echo "  --no-color     Disable color output"
	    echo "  --help, -h     Show this help message"
	    echo ""
	}
	
	# Check if terminal supports colors
	check_color_support() {
	    # If colors are force disabled, return false
	    if [[ "$FORCE_NO_COLOR" == true ]]; then
|3,0,6,1,50,0,1753150249,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"",>22
|<"FORCE_NO_COLOR=false","","# Parse command line arguments","parse_args() {","    while [[ $# -gt 0 ]]; do","        case $1 in","            --no-color|--no-colour)","                FORCE_NO_COLOR=true","                shift","                ;;","            --help|-h)","                show_usage","                exit 0","                ;;","            *)","                echo \"Unknown option: $1\"","                show_usage","                exit 1","                ;;",>14
|<"        esac","    done","}","","show_usage() {","    echo \"Usage: $0 [OPTIONS]\"","    echo \"\"","    echo \"Options:\"","    echo \"  --no-color     Disable color output\"","    echo \"  --help, -h     Show this help message\"","    echo \"\"","}","","# Check if terminal supports colors","check_color_support() {","    # If colors are force disabled, return false","    if [[ \"$FORCE_NO_COLOR\" == true ]]; then"
"7	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	FORCE_NO_COLOR=false
	
	# Parse command line arguments
	parse_args() {
	    while [[ $# -gt 0 ]]; do
	        case $1 in
	            --no-color|--no-colour)
	                FORCE_NO_COLOR=true
	                shift
	                ;;
	            --help|-h)
	                show_usage
	                exit 0
	                ;;
	            *)
	                echo "Unknown option: $1"
	                show_usage
	                exit 1
	                ;;
	        esac
	    done
	}
	
	show_usage() {
	    echo "Usage: $0 [OPTIONS]"
	    echo ""
	    echo "Options:"
	    echo "  --no-color     Disable color output"
	    echo "  --help, -h     Show this help message"
	    echo ""
	}
	
	# Check if terminal supports colors
	check_color_support() {
	    # If colors are force disabled, return false
	    if [[ "$FORCE_NO_COLOR" == true ]]; then
|3,0,7,1,50,0,1753150221,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"",>22
|<"FORCE_NO_COLOR=false","","# Parse command line arguments","parse_args() {","    while [[ $# -gt 0 ]]; do","        case $1 in","            --no-color|--no-colour)","                FORCE_NO_COLOR=true","                shift","                ;;","            --help|-h)","                show_usage","                exit 0","                ;;","            *)","                echo \"Unknown option: $1\"","                show_usage","                exit 1","                ;;",>14
|<"        esac","    done","}","","show_usage() {","    echo \"Usage: $0 [OPTIONS]\"","    echo \"\"","    echo \"Options:\"","    echo \"  --no-color     Disable color output\"","    echo \"  --help, -h     Show this help message\"","    echo \"\"","}","","# Check if terminal supports colors","check_color_support() {","    # If colors are force disabled, return false","    if [[ \"$FORCE_NO_COLOR\" == true ]]; then"
"8	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	
	# Check if terminal supports colors
	check_color_support() {
	    if [[ -t 1 ]] && command -v tput >/dev/null 2>&1 && tput colors >/dev/null 2>&1; then
	        local colors=$(tput colors 2>/dev/null || echo 0)
	        [[ $colors -ge 8 ]]
	    else
	        return 1
	    fi
	}
	
	# Set colors based on terminal support
	if check_color_support; then
	    # Colors for output
	    RED='\033[0;31m'
	    GREEN='\033[0;32m'
	    YELLOW='\033[1;33m'
	    BLUE='\033[0;34m'
	    CYAN='\033[0;36m'
	    MAGENTA='\033[0;35m'
	    WHITE='\033[1;37m'
	    NC='\033[0m' # No Color
	
	    # TUI Colors
	    MENU_HEADER='\033[1;36m'
	    MENU_OPTION='\033[1;33m'
	    MENU_SELECTED='\033[1;32m'
	    BORDER='\033[0;36m'
	else
	    # Fallback - no colors
	    RED=''
	    GREEN=''
	    YELLOW=''
	    BLUE=''
	    CYAN=''
	    MAGENTA=''
|3,0,8,1,50,0,1753149861,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"","",>37
|<"# Check if terminal supports colors","check_color_support() {","    if [[ -t 1 ]] && command -v tput >/dev/null 2>&1 && tput colors >/dev/null 2>&1; then","        local colors=$(tput colors 2>/dev/null || echo 0)","        [[ $colors -ge 8 ]]","    else","        return 1","    fi","}","","# Set colors based on terminal support","if check_color_support; then","    # Colors for output","    RED='\\033[0;31m'","    GREEN='\\033[0;32m'","    YELLOW='\\033[1;33m'",>24
|<"    BLUE='\\033[0;34m'","    CYAN='\\033[0;36m'","    MAGENTA='\\033[0;35m'","    WHITE='\\033[1;37m'","    NC='\\033[0m' # No Color","","    # TUI Colors","    MENU_HEADER='\\033[1;36m'","    MENU_OPTION='\\033[1;33m'","    MENU_SELECTED='\\033[1;32m'","    BORDER='\\033[0;36m'","else","    # Fallback - no colors","    RED=''","    GREEN=''","    YELLOW=''","    BLUE=''","    CYAN=''","    MAGENTA=''"
"9	LINE	0
	#!/bin/bash
	
	# Whitelisted IPs Check Script - TUI Version
	# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall
	# Compatible with: RHEL, Debian, SUSE, Arch Linux families
	# Author: Web Development Setup Script Project
	# Version: 2.0 (TUI Edition)
	
	set -euo pipefail
	
	# Global variables
	VERBOSE=false
	OUTPUT_FILE=""
	TEMP_DIR="/tmp/whitelist-tui-$$"
	
	# Check if terminal supports colors
	check_color_support() {
	    if [[ -t 1 ]] && command -v tput >/dev/null 2>&1 && tput colors >/dev/null 2>&1; then
	        local colors=$(tput colors 2>/dev/null || echo 0)
	        [[ $colors -ge 8 ]]
	    else
	        return 1
	    fi
	}
	
	# Set colors based on terminal support
	if check_color_support; then
	    # Colors for output
	    RED='\033[0;31m'
	    GREEN='\033[0;32m'
	    YELLOW='\033[1;33m'
	    BLUE='\033[0;34m'
	    CYAN='\033[0;36m'
	    MAGENTA='\033[0;35m'
	    WHITE='\033[1;37m'
	    NC='\033[0m' # No Color
	
	    # TUI Colors
	    MENU_HEADER='\033[1;36m'
	    MENU_OPTION='\033[1;33m'
	    MENU_SELECTED='\033[1;32m'
	    BORDER='\033[0;36m'
	else
	    # Fallback - no colors
	    RED=''
	    GREEN=''
	    YELLOW=''
	    BLUE=''
	    CYAN=''
	    MAGENTA=''
|3,0,9,1,50,0,1753149479,"#!/bin/bash","","# Whitelisted IPs Check Script - TUI Version","# Description: Interactive TUI for comprehensive whitelist analysis in fail2ban and firewall","# Compatible with: RHEL, Debian, SUSE, Arch Linux families","# Author: Web Development Setup Script Project","# Version: 2.0 (TUI Edition)","","set -euo pipefail","","# Global variables","VERBOSE=false","OUTPUT_FILE=\"\"","TEMP_DIR=\"/tmp/whitelist-tui-$$\"","",>37
|<"# Check if terminal supports colors","check_color_support() {","    if [[ -t 1 ]] && command -v tput >/dev/null 2>&1 && tput colors >/dev/null 2>&1; then","        local colors=$(tput colors 2>/dev/null || echo 0)","        [[ $colors -ge 8 ]]","    else","        return 1","    fi","}","","# Set colors based on terminal support","if check_color_support; then","    # Colors for output","    RED='\\033[0;31m'","    GREEN='\\033[0;32m'","    YELLOW='\\033[1;33m'",>24
|<"    BLUE='\\033[0;34m'","    CYAN='\\033[0;36m'","    MAGENTA='\\033[0;35m'","    WHITE='\\033[1;37m'","    NC='\\033[0m' # No Color","","    # TUI Colors","    MENU_HEADER='\\033[1;36m'","    MENU_OPTION='\\033[1;33m'","    MENU_SELECTED='\\033[1;32m'","    BORDER='\\033[0;36m'","else","    # Fallback - no colors","    RED=''","    GREEN=''","    YELLOW=''","    BLUE=''","    CYAN=''","    MAGENTA=''"

# File marks:
'0  36  0  ~/test.sh
|4,48,36,0,1753155089,"~/test.sh"
'1  1  0  ~/test.sh
|4,49,1,0,1753154723,"~/test.sh"
'2  27  0  ~/test.sh
|4,50,27,0,1753154723,"~/test.sh"
'3  1  0  ~/test.sh
|4,51,1,0,1753154596,"~/test.sh"
'4  27  0  ~/test.sh
|4,52,27,0,1753154596,"~/test.sh"
'5  1  0  ~/test.sh
|4,53,1,0,1753154596,"~/test.sh"
'6  54  0  ~/test.sh
|4,54,54,0,1753154596,"~/test.sh"
'7  1229  0  ~/check-whitelist-tui.sh
|4,55,1229,0,1753150534,"~/check-whitelist-tui.sh"
'8  1  0  ~/check-whitelist-tui.sh
|4,56,1,0,1753150396,"~/check-whitelist-tui.sh"
'9  1229  0  ~/check-whitelist-tui.sh
|4,57,1229,0,1753150396,"~/check-whitelist-tui.sh"

# Jumplist (newest first):
-'  36  0  ~/test.sh
|4,39,36,0,1753155089,"~/test.sh"
-'  1  0  ~/test.sh
|4,39,1,0,1753155085,"~/test.sh"
-'  27  0  ~/test.sh
|4,39,27,0,1753154723,"~/test.sh"
-'  1  0  ~/test.sh
|4,39,1,0,1753154719,"~/test.sh"
-'  27  0  ~/test.sh
|4,39,27,0,1753154596,"~/test.sh"
-'  54  0  ~/test.sh
|4,39,54,0,1753154596,"~/test.sh"
-'  1  0  ~/test.sh
|4,39,1,0,1753154356,"~/test.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150534,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150527,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150396,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150363,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1229  0  ~/check-whitelist-tui.sh
|4,39,1229,0,1753150321,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150315,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150262,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150249,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1228  0  ~/check-whitelist-tui.sh
|4,39,1228,0,1753150226,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753150221,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1162  0  ~/check-whitelist-tui.sh
|4,39,1162,0,1753149868,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753149861,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753149861,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753149861,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753149861,"~/check-whitelist-tui.sh"
-'  1  0  ~/check-whitelist-tui.sh
|4,39,1,0,1753149861,"~/check-whitelist-tui.sh"

# History of marks within files (newest to oldest):

> ~/test.sh
	*	1753155088	0
	"	36	0
	^	36	0
	.	35	34
	+	1	11
	+	35	34

> ~/check-whitelist-tui.sh
	*	1753150532	0
	"	1229	0
	^	1229	0
	.	1228	9
	+	1	11
	+	1	9
	+	1	11
	+	1228	9

> ~/todo.txt
	*	1753125285	0
	"	2	2
	^	2	3
	.	4	2
	+	1	83
	+	4	2

> ~/check-whitelist.sh
	*	1753051989	0
	"	316	0
	^	316	0
	.	315	9
	+	315	9

> /usr/share/nginx/html/one.html
	*	1752975764	0
	"	1	0
	^	1	0
	.	1	0
	+	1	0

> ~/setup.sh
	*	1752960620	0
	"	4104	0
	^	4104	0
	.	4103	9
	+	1	11
	+	1	9
	+	1	11
	+	1	49
	+	1	174
	+	1	49
	+	1	174
	+	1	49
	+	1	174
	+	1	11
	+	4103	9

> /etc/nginx/conf.d/default.conf
	*	1752899817	0
	"	14	47
	^	14	48
	.	14	47
	+	14	8
	+	15	0
	+	14	47

> /var/www/html/index.php
	*	1752895308	0
	"	3	9
	^	3	10
	.	3	9
	+	4	1
	+	3	7
	+	2	17
	+	3	9
